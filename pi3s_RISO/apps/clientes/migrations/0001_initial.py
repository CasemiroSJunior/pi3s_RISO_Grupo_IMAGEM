# Generated by Django 5.2 on 2025-06-09 01:41

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='Nome Completo/Razão Social')),
                ('tipo', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], default='PF', max_length=2, verbose_name='Tipo de Cliente')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Formato de CPF inválido. Use: 000.000.000-00', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Formato de CNPJ inválido. Use: 00.000.000/0000-00', regex='^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='Formato de CEP inválido. Use: 00000-000', regex='^\\d{5}-\\d{3}$')], verbose_name='CEP')),
                ('rua', models.CharField(blank=True, max_length=255, null=True, verbose_name='Rua')),
                ('numero', models.CharField(max_length=10, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=255, null=True, verbose_name='Complemento')),
                ('bairro', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bairro')),
                ('cidade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cidade')),
                ('estado', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, null=True, verbose_name='Estado')),
                ('telefone_principal', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Formato de telefone principal inválido. Use: (00) 0000-0000 ou (00) 00000-0000', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone Principal')),
                ('telefone_secundario', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Formato de telefone secundário inválido. Use: (00) 0000-0000 ou (00) 00000-0000', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone Secundário')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['nome_completo'],
            },
        ),
    ]
